WebSocket {
  domain: null,
  _events: { close: [Function] },
  _eventsCount: 1,
  _maxListeners: undefined,
  readyState: 1,
  bytesReceived: 0,
  extensions: {},
  protocol: '',
  _binaryType: 'nodebuffer',
  _finalize: { [Function: bound finalize] __ultron: 1 },
  _finalizeCalled: false,
  _closeMessage: null,
  _closeTimer: null,
  _closeCode: null,
  _receiver: 
   Receiver {
     _binaryType: 'nodebuffer',
     _extensions: {},
     _maxPayload: 104857600,
     _bufferedBytes: 0,
     _buffers: [],
     _compressed: false,
     _payloadLength: 0,
     _fragmented: 0,
     _masked: false,
     _fin: false,
     _mask: null,
     _opcode: 0,
     _totalPayloadLength: 0,
     _messageLength: 0,
     _fragments: [],
     _cleanupCallback: null,
     _hadError: false,
     _dead: false,
     _loop: false,
     onmessage: [Function],
     onclose: [Function],
     onerror: [Function],
     onping: [Function],
     onpong: [Function],
     _state: 0 },
  _sender: 
   Sender {
     _extensions: {},
     _socket: 
      TLSSocket {
        _tlsOptions: 
         { secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           requestCert: false,
           rejectUnauthorized: false,
           handshakeTimeout: 120000,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback: [Function: SNICallback] },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: 
         { close: 
            [ [Function],
              [Function],
              { [Function: bound finalize] __ultron: 1 } ],
           end: 
            [ { [Function: g] listener: [Function: onend] },
              { [Function: bound finalize] __ultron: 1 } ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           secure: [Function],
           _tlsError: [Function],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: 
            [ [Function: socketOnError],
              { [Function: bound finalize] __ultron: 1 } ],
           data: { [Function] __ultron: 1 } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle: 
         TLSWrap {
           bytesRead: 553,
           _externalStream: {},
           fd: -1,
           _parent: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: 
               Socket {
                 connecting: false,
                 _hadError: false,
                 _handle: [Circular],
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: { [Function: g] listener: [Function: onend] },
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    connect: { [Function: g] listener: [Function] },
                    error: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 0,
                    prefinished: false,
                    errorEmitted: false,
                    bufferedRequestCount: 0,
                    corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                 writable: true,
                 allowHalfOpen: false,
                 destroyed: false,
                 _bytesDispatched: 0,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' },
                 _server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' } },
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parentWrap: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 bytesRead: 1150,
                 _externalStream: {},
                 fd: -1,
                 reading: [Getter/Setter],
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           _secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           writeQueueSize: 1,
           onhandshakestart: [Function],
           onhandshakedone: [Function],
           onclienthello: [Function],
           oncertcb: [Function],
           onnewsession: [Function],
           lastHandshakeTime: 11182,
           handshakes: 0,
           onerror: [Function] },
        _parent: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: { [Function: g] listener: [Function: onend] },
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              connect: { [Function: g] listener: [Function] },
              error: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
           writable: true,
           allowHalfOpen: false,
           destroyed: false,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           _server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' } },
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: true,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 129,
           writing: true,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: [Function: nop],
           writelen: 129,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 129,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           _contexts: [],
           requestCert: false,
           rejectUnauthorized: false,
           key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
           passphrase: '123456',
           cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
           honorCipherOrder: true,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
           _sharedCreds: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           domain: null,
           _events: 
            { connection: [Function],
              secureConnection: [Function: connectionListener],
              request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              tlsClientError: [Function],
              listening: [ { [Function] __ultron: 0 } ],
              error: { [Function] __ultron: 0 },
              upgrade: { [Function] __ultron: 0 } },
           _eventsCount: 7,
           _maxListeners: undefined,
           _connections: 7,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '6::::5000' },
        _server: null,
        ssl: 
         TLSWrap {
           bytesRead: 553,
           _externalStream: {},
           fd: -1,
           _parent: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: 
               Socket {
                 connecting: false,
                 _hadError: false,
                 _handle: [Circular],
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: { [Function: g] listener: [Function: onend] },
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    connect: { [Function: g] listener: [Function] },
                    error: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 0,
                    prefinished: false,
                    errorEmitted: false,
                    bufferedRequestCount: 0,
                    corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                 writable: true,
                 allowHalfOpen: false,
                 destroyed: false,
                 _bytesDispatched: 0,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' },
                 _server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' } },
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parentWrap: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 bytesRead: 1150,
                 _externalStream: {},
                 fd: -1,
                 reading: [Getter/Setter],
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           _secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           writeQueueSize: 1,
           onhandshakestart: [Function],
           onhandshakedone: [Function],
           onclienthello: [Function],
           oncertcb: [Function],
           onnewsession: [Function],
           lastHandshakeTime: 11182,
           handshakes: 0,
           onerror: [Function] },
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: -1,
        _idleNext: null,
        _idlePrev: null,
        _idleStart: 11185,
        parser: null,
        on: [Function],
        _paused: false,
        read: [Function],
        _consuming: true },
     _firstFragment: true,
     _compress: false,
     _bufferedBytes: 0,
     _deflating: false,
     _queue: [],
     onerror: [Function] },
  _socket: 
   TLSSocket {
     _tlsOptions: 
      { secureContext: 
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        isServer: true,
        server: 
         Server {
           _contexts: [],
           requestCert: false,
           rejectUnauthorized: false,
           key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
           passphrase: '123456',
           cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
           honorCipherOrder: true,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
           _sharedCreds: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           domain: null,
           _events: 
            { connection: [Function],
              secureConnection: [Function: connectionListener],
              request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              tlsClientError: [Function],
              listening: [ { [Function] __ultron: 0 } ],
              error: { [Function] __ultron: 0 },
              upgrade: { [Function] __ultron: 0 } },
           _eventsCount: 7,
           _maxListeners: undefined,
           _connections: 7,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '6::::5000' },
        requestCert: false,
        rejectUnauthorized: false,
        handshakeTimeout: 120000,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        SNICallback: [Function: SNICallback] },
     _secureEstablished: true,
     _securePending: false,
     _newSessionPending: false,
     _controlReleased: true,
     _SNICallback: null,
     servername: 'localhost',
     npnProtocol: false,
     alpnProtocol: 'http/1.1',
     authorized: false,
     authorizationError: null,
     encrypted: true,
     _events: 
      { close: 
         [ [Function],
           [Function],
           { [Function: bound finalize] __ultron: 1 } ],
        end: 
         [ { [Function: g] listener: [Function: onend] },
           { [Function: bound finalize] __ultron: 1 } ],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        secure: [Function],
        _tlsError: [Function],
        drain: [ [Function: ondrain], [Function: socketOnDrain] ],
        timeout: [Function],
        error: 
         [ [Function: socketOnError],
           { [Function: bound finalize] __ultron: 1 } ],
        data: { [Function] __ultron: 1 } },
     _eventsCount: 10,
     connecting: false,
     _hadError: false,
     _handle: 
      TLSWrap {
        bytesRead: 553,
        _externalStream: {},
        fd: -1,
        _parent: 
         TCP {
           bytesRead: 1150,
           _externalStream: {},
           fd: -1,
           reading: [Getter/Setter],
           owner: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parentWrap: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: { [Function: g] listener: [Function: onend] },
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              connect: { [Function: g] listener: [Function] },
              error: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
           writable: true,
           allowHalfOpen: false,
           destroyed: false,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           _server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' } },
        _secureContext: 
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 11182,
        handshakes: 0,
        onerror: [Function] },
     _parent: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: 
         TCP {
           bytesRead: 1150,
           _externalStream: {},
           fd: -1,
           reading: [Getter/Setter],
           owner: [Circular],
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parent: null,
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: null,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _events: 
         { end: { [Function: g] listener: [Function: onend] },
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           connect: { [Function: g] listener: [Function] },
           error: [Function] },
        _eventsCount: 5,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: null,
           writelen: 0,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           _contexts: [],
           requestCert: false,
           rejectUnauthorized: false,
           key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
           passphrase: '123456',
           cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
           honorCipherOrder: true,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
           _sharedCreds: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           domain: null,
           _events: 
            { connection: [Function],
              secureConnection: [Function: connectionListener],
              request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              tlsClientError: [Function],
              listening: [ { [Function] __ultron: 0 } ],
              error: { [Function] __ultron: 0 },
              upgrade: { [Function] __ultron: 0 } },
           _eventsCount: 7,
           _maxListeners: undefined,
           _connections: 7,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '6::::5000' },
        _server: 
         Server {
           _contexts: [],
           requestCert: false,
           rejectUnauthorized: false,
           key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
           passphrase: '123456',
           cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
           honorCipherOrder: true,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
           _sharedCreds: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           domain: null,
           _events: 
            { connection: [Function],
              secureConnection: [Function: connectionListener],
              request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              tlsClientError: [Function],
              listening: [ { [Function] __ultron: 0 } ],
              error: { [Function] __ultron: 0 },
              upgrade: { [Function] __ultron: 0 } },
           _eventsCount: 7,
           _maxListeners: undefined,
           _connections: 7,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '6::::5000' } },
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: true,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 129,
        writing: true,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: [Function: nop],
        writelen: 129,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
     writable: true,
     allowHalfOpen: false,
     destroyed: false,
     _bytesDispatched: 129,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        _contexts: [],
        requestCert: false,
        rejectUnauthorized: false,
        key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
        passphrase: '123456',
        cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
        honorCipherOrder: true,
        NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
        ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
        sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
        _sharedCreds: 
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        domain: null,
        _events: 
         { connection: [Function],
           secureConnection: [Function: connectionListener],
           request: 
            { [Function: app]
              domain: undefined,
              _events: { mount: [Function: onmount] },
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function],
              bind: [Function],
              checkout: [Function],
              connect: [Function],
              copy: [Function],
              delete: [Function],
              get: [Function],
              head: [Function],
              link: [Function],
              lock: [Function],
              'm-search': [Function],
              merge: [Function],
              mkactivity: [Function],
              mkcalendar: [Function],
              mkcol: [Function],
              move: [Function],
              notify: [Function],
              options: [Function],
              patch: [Function],
              post: [Function],
              propfind: [Function],
              proppatch: [Function],
              purge: [Function],
              put: [Function],
              rebind: [Function],
              report: [Function],
              search: [Function],
              subscribe: [Function],
              trace: [Function],
              unbind: [Function],
              unlink: [Function],
              unlock: [Function],
              unsubscribe: [Function],
              all: [Function: all],
              del: [Function],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular] },
              response: ServerResponse { app: [Circular] },
              cache: {},
              engines: {},
              settings: 
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function: parseExtendedQueryString],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                 'jsonp callback name': 'callback' },
              _eventsCount: 1,
              locals: 
               { settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router: 
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack: 
                  [ Layer {
                      handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function],
                      name: '<anonymous>',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '/js',
                      keys: [],
                      regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '/js',
                      keys: [],
                      regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: {},
                      path: '/js',
                      keys: [],
                      regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined },
                    Layer {
                      handle: [Function: serveStatic],
                      name: 'serveStatic',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                      route: undefined } ] } },
           tlsClientError: [Function],
           listening: [ { [Function] __ultron: 0 } ],
           error: { [Function] __ultron: 0 },
           upgrade: { [Function] __ultron: 0 } },
        _eventsCount: 7,
        _maxListeners: undefined,
        _connections: 7,
        _handle: 
         TCP {
           bytesRead: 0,
           _externalStream: {},
           fd: -1,
           reading: false,
           owner: [Circular],
           onread: null,
           onconnection: [Function: onconnection],
           writeQueueSize: 0 },
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: false,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '6::::5000' },
     _server: null,
     ssl: 
      TLSWrap {
        bytesRead: 553,
        _externalStream: {},
        fd: -1,
        _parent: 
         TCP {
           bytesRead: 1150,
           _externalStream: {},
           fd: -1,
           reading: [Getter/Setter],
           owner: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [Circular],
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           onread: [Function: onread],
           onconnection: null,
           writeQueueSize: 0 },
        _parentWrap: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: { [Function: g] listener: [Function: onend] },
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              connect: { [Function: g] listener: [Function] },
              error: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
           writable: true,
           allowHalfOpen: false,
           destroyed: false,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           _server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' } },
        _secureContext: 
         SecureContext {
           context: SecureContext {},
           alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        writeQueueSize: 1,
        onhandshakestart: [Function],
        onhandshakedone: [Function],
        onclienthello: [Function],
        oncertcb: [Function],
        onnewsession: [Function],
        lastHandshakeTime: 11182,
        handshakes: 0,
        onerror: [Function] },
     _requestCert: false,
     _rejectUnauthorized: false,
     _idleTimeout: -1,
     _idleNext: null,
     _idlePrev: null,
     _idleStart: 11185,
     parser: null,
     on: [Function],
     _paused: false,
     read: [Function],
     _consuming: true },
  _ultron: 
   Ultron {
     id: 1,
     ee: 
      TLSSocket {
        _tlsOptions: 
         { secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           isServer: true,
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           requestCert: false,
           rejectUnauthorized: false,
           handshakeTimeout: 120000,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           SNICallback: [Function: SNICallback] },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: 'localhost',
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: 
         { close: 
            [ [Function],
              [Function],
              { [Function: bound finalize] __ultron: 1 } ],
           end: 
            [ { [Function: g] listener: [Function: onend] },
              { [Function: bound finalize] __ultron: 1 } ],
           finish: [Function: onSocketFinish],
           _socketEnd: [Function: onSocketEnd],
           secure: [Function],
           _tlsError: [Function],
           drain: [ [Function: ondrain], [Function: socketOnDrain] ],
           timeout: [Function],
           error: 
            [ [Function: socketOnError],
              { [Function: bound finalize] __ultron: 1 } ],
           data: { [Function] __ultron: 1 } },
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _handle: 
         TLSWrap {
           bytesRead: 553,
           _externalStream: {},
           fd: -1,
           _parent: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: 
               Socket {
                 connecting: false,
                 _hadError: false,
                 _handle: [Circular],
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: { [Function: g] listener: [Function: onend] },
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    connect: { [Function: g] listener: [Function] },
                    error: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 0,
                    prefinished: false,
                    errorEmitted: false,
                    bufferedRequestCount: 0,
                    corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                 writable: true,
                 allowHalfOpen: false,
                 destroyed: false,
                 _bytesDispatched: 0,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' },
                 _server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' } },
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parentWrap: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 bytesRead: 1150,
                 _externalStream: {},
                 fd: -1,
                 reading: [Getter/Setter],
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           _secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           writeQueueSize: 1,
           onhandshakestart: [Function],
           onhandshakedone: [Function],
           onclienthello: [Function],
           oncertcb: [Function],
           onnewsession: [Function],
           lastHandshakeTime: 11182,
           handshakes: 0,
           onerror: [Function] },
        _parent: 
         Socket {
           connecting: false,
           _hadError: false,
           _handle: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: [Circular],
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parent: null,
           _host: null,
           _readableState: 
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: null,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events: 
            { end: { [Function: g] listener: [Function: onend] },
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              connect: { [Function: g] listener: [Function] },
              error: [Function] },
           _eventsCount: 5,
           _maxListeners: undefined,
           _writableState: 
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
           writable: true,
           allowHalfOpen: false,
           destroyed: false,
           _bytesDispatched: 0,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' },
           _server: 
            Server {
              _contexts: [],
              requestCert: false,
              rejectUnauthorized: false,
              key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
              passphrase: '123456',
              cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
              honorCipherOrder: true,
              NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
              ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
              sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
              _sharedCreds: 
               SecureContext {
                 context: SecureContext {},
                 alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
              domain: null,
              _events: 
               { connection: [Function],
                 secureConnection: [Function: connectionListener],
                 request: 
                  { [Function: app]
                    domain: undefined,
                    _events: { mount: [Function: onmount] },
                    _maxListeners: undefined,
                    setMaxListeners: [Function: setMaxListeners],
                    getMaxListeners: [Function: getMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    prependListener: [Function: prependListener],
                    once: [Function: once],
                    prependOnceListener: [Function: prependOnceListener],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    listenerCount: [Function: listenerCount],
                    eventNames: [Function: eventNames],
                    init: [Function: init],
                    defaultConfiguration: [Function: defaultConfiguration],
                    lazyrouter: [Function: lazyrouter],
                    handle: [Function: handle],
                    use: [Function: use],
                    route: [Function: route],
                    engine: [Function: engine],
                    param: [Function: param],
                    set: [Function: set],
                    path: [Function: path],
                    enabled: [Function: enabled],
                    disabled: [Function: disabled],
                    enable: [Function: enable],
                    disable: [Function: disable],
                    acl: [Function],
                    bind: [Function],
                    checkout: [Function],
                    connect: [Function],
                    copy: [Function],
                    delete: [Function],
                    get: [Function],
                    head: [Function],
                    link: [Function],
                    lock: [Function],
                    'm-search': [Function],
                    merge: [Function],
                    mkactivity: [Function],
                    mkcalendar: [Function],
                    mkcol: [Function],
                    move: [Function],
                    notify: [Function],
                    options: [Function],
                    patch: [Function],
                    post: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    purge: [Function],
                    put: [Function],
                    rebind: [Function],
                    report: [Function],
                    search: [Function],
                    subscribe: [Function],
                    trace: [Function],
                    unbind: [Function],
                    unlink: [Function],
                    unlock: [Function],
                    unsubscribe: [Function],
                    all: [Function: all],
                    del: [Function],
                    render: [Function: render],
                    listen: [Function: listen],
                    request: IncomingMessage { app: [Circular] },
                    response: ServerResponse { app: [Circular] },
                    cache: {},
                    engines: {},
                    settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' },
                    _eventsCount: 1,
                    locals: 
                     { settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router: 
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack: 
                        [ Layer {
                            handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function],
                            name: '<anonymous>',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: {},
                            path: '/js',
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined },
                          Layer {
                            handle: [Function: serveStatic],
                            name: 'serveStatic',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                            route: undefined } ] } },
                 tlsClientError: [Function],
                 listening: [ { [Function] __ultron: 0 } ],
                 error: { [Function] __ultron: 0 },
                 upgrade: { [Function] __ultron: 0 } },
              _eventsCount: 7,
              _maxListeners: undefined,
              _connections: 7,
              _handle: 
               TCP {
                 bytesRead: 0,
                 _externalStream: {},
                 fd: -1,
                 reading: false,
                 owner: [Circular],
                 onread: null,
                 onconnection: [Function: onconnection],
                 writeQueueSize: 0 },
              _usingSlaves: false,
              _slaves: [],
              _unref: false,
              allowHalfOpen: false,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '6::::5000' } },
        _host: null,
        _readableState: 
         ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: null,
           pipesCount: 0,
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: true,
           defaultEncoding: 'utf8',
           ranOut: false,
           awaitDrain: 0,
           readingMore: false,
           decoder: null,
           encoding: null },
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: 
         WritableState {
           objectMode: false,
           highWaterMark: 16384,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 129,
           writing: true,
           corked: 0,
           sync: false,
           bufferProcessing: false,
           onwrite: [Function],
           writecb: [Function: nop],
           writelen: 129,
           bufferedRequest: null,
           lastBufferedRequest: null,
           pendingcb: 1,
           prefinished: false,
           errorEmitted: false,
           bufferedRequestCount: 0,
           corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 129,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: 
         Server {
           _contexts: [],
           requestCert: false,
           rejectUnauthorized: false,
           key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
           passphrase: '123456',
           cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
           honorCipherOrder: true,
           NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
           ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
           sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
           _sharedCreds: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           domain: null,
           _events: 
            { connection: [Function],
              secureConnection: [Function: connectionListener],
              request: 
               { [Function: app]
                 domain: undefined,
                 _events: { mount: [Function: onmount] },
                 _maxListeners: undefined,
                 setMaxListeners: [Function: setMaxListeners],
                 getMaxListeners: [Function: getMaxListeners],
                 emit: [Function: emit],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 prependListener: [Function: prependListener],
                 once: [Function: once],
                 prependOnceListener: [Function: prependOnceListener],
                 removeListener: [Function: removeListener],
                 removeAllListeners: [Function: removeAllListeners],
                 listeners: [Function: listeners],
                 listenerCount: [Function: listenerCount],
                 eventNames: [Function: eventNames],
                 init: [Function: init],
                 defaultConfiguration: [Function: defaultConfiguration],
                 lazyrouter: [Function: lazyrouter],
                 handle: [Function: handle],
                 use: [Function: use],
                 route: [Function: route],
                 engine: [Function: engine],
                 param: [Function: param],
                 set: [Function: set],
                 path: [Function: path],
                 enabled: [Function: enabled],
                 disabled: [Function: disabled],
                 enable: [Function: enable],
                 disable: [Function: disable],
                 acl: [Function],
                 bind: [Function],
                 checkout: [Function],
                 connect: [Function],
                 copy: [Function],
                 delete: [Function],
                 get: [Function],
                 head: [Function],
                 link: [Function],
                 lock: [Function],
                 'm-search': [Function],
                 merge: [Function],
                 mkactivity: [Function],
                 mkcalendar: [Function],
                 mkcol: [Function],
                 move: [Function],
                 notify: [Function],
                 options: [Function],
                 patch: [Function],
                 post: [Function],
                 propfind: [Function],
                 proppatch: [Function],
                 purge: [Function],
                 put: [Function],
                 rebind: [Function],
                 report: [Function],
                 search: [Function],
                 subscribe: [Function],
                 trace: [Function],
                 unbind: [Function],
                 unlink: [Function],
                 unlock: [Function],
                 unsubscribe: [Function],
                 all: [Function: all],
                 del: [Function],
                 render: [Function: render],
                 listen: [Function: listen],
                 request: IncomingMessage { app: [Circular] },
                 response: ServerResponse { app: [Circular] },
                 cache: {},
                 engines: {},
                 settings: 
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function: parseExtendedQueryString],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                    'jsonp callback name': 'callback' },
                 _eventsCount: 1,
                 locals: 
                  { settings: 
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function: parseExtendedQueryString],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                       'jsonp callback name': 'callback' } },
                 mountpath: '/',
                 _router: 
                  { [Function: router]
                    params: {},
                    _params: [],
                    caseSensitive: false,
                    mergeParams: undefined,
                    strict: false,
                    stack: 
                     [ Layer {
                         handle: [Function: query],
                         name: 'query',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: expressInit],
                         name: 'expressInit',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function],
                         name: '<anonymous>',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '',
                         keys: [],
                         regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: {},
                         path: '/js',
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined },
                       Layer {
                         handle: [Function: serveStatic],
                         name: 'serveStatic',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                         route: undefined } ] } },
              tlsClientError: [Function],
              listening: [ { [Function] __ultron: 0 } ],
              error: { [Function] __ultron: 0 },
              upgrade: { [Function] __ultron: 0 } },
           _eventsCount: 7,
           _maxListeners: undefined,
           _connections: 7,
           _handle: 
            TCP {
              bytesRead: 0,
              _externalStream: {},
              fd: -1,
              reading: false,
              owner: [Circular],
              onread: null,
              onconnection: [Function: onconnection],
              writeQueueSize: 0 },
           _usingSlaves: false,
           _slaves: [],
           _unref: false,
           allowHalfOpen: false,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 120000,
           _connectionKey: '6::::5000' },
        _server: null,
        ssl: 
         TLSWrap {
           bytesRead: 553,
           _externalStream: {},
           fd: -1,
           _parent: 
            TCP {
              bytesRead: 1150,
              _externalStream: {},
              fd: -1,
              reading: [Getter/Setter],
              owner: 
               Socket {
                 connecting: false,
                 _hadError: false,
                 _handle: [Circular],
                 _parent: null,
                 _host: null,
                 _readableState: 
                  ReadableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    buffer: BufferList { head: null, tail: null, length: 0 },
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: null,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    resumeScheduled: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events: 
                  { end: { [Function: g] listener: [Function: onend] },
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    connect: { [Function: g] listener: [Function] },
                    error: [Function] },
                 _eventsCount: 5,
                 _maxListeners: undefined,
                 _writableState: 
                  WritableState {
                    objectMode: false,
                    highWaterMark: 16384,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    corked: 0,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    bufferedRequest: null,
                    lastBufferedRequest: null,
                    pendingcb: 0,
                    prefinished: false,
                    errorEmitted: false,
                    bufferedRequestCount: 0,
                    corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                 writable: true,
                 allowHalfOpen: false,
                 destroyed: false,
                 _bytesDispatched: 0,
                 _sockname: null,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' },
                 _server: 
                  Server {
                    _contexts: [],
                    requestCert: false,
                    rejectUnauthorized: false,
                    key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                    passphrase: '123456',
                    cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                    honorCipherOrder: true,
                    NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                    ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                    sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                    _sharedCreds: 
                     SecureContext {
                       context: SecureContext {},
                       alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                    domain: null,
                    _events: 
                     { connection: [Function],
                       secureConnection: [Function: connectionListener],
                       request: 
                        { [Function: app]
                          domain: undefined,
                          _events: { mount: [Function: onmount] },
                          _maxListeners: undefined,
                          setMaxListeners: [Function: setMaxListeners],
                          getMaxListeners: [Function: getMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          prependListener: [Function: prependListener],
                          once: [Function: once],
                          prependOnceListener: [Function: prependOnceListener],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          listenerCount: [Function: listenerCount],
                          eventNames: [Function: eventNames],
                          init: [Function: init],
                          defaultConfiguration: [Function: defaultConfiguration],
                          lazyrouter: [Function: lazyrouter],
                          handle: [Function: handle],
                          use: [Function: use],
                          route: [Function: route],
                          engine: [Function: engine],
                          param: [Function: param],
                          set: [Function: set],
                          path: [Function: path],
                          enabled: [Function: enabled],
                          disabled: [Function: disabled],
                          enable: [Function: enable],
                          disable: [Function: disable],
                          acl: [Function],
                          bind: [Function],
                          checkout: [Function],
                          connect: [Function],
                          copy: [Function],
                          delete: [Function],
                          get: [Function],
                          head: [Function],
                          link: [Function],
                          lock: [Function],
                          'm-search': [Function],
                          merge: [Function],
                          mkactivity: [Function],
                          mkcalendar: [Function],
                          mkcol: [Function],
                          move: [Function],
                          notify: [Function],
                          options: [Function],
                          patch: [Function],
                          post: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          purge: [Function],
                          put: [Function],
                          rebind: [Function],
                          report: [Function],
                          search: [Function],
                          subscribe: [Function],
                          trace: [Function],
                          unbind: [Function],
                          unlink: [Function],
                          unlock: [Function],
                          unsubscribe: [Function],
                          all: [Function: all],
                          del: [Function],
                          render: [Function: render],
                          listen: [Function: listen],
                          request: IncomingMessage { app: [Circular] },
                          response: ServerResponse { app: [Circular] },
                          cache: {},
                          engines: {},
                          settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' },
                          _eventsCount: 1,
                          locals: 
                           { settings: 
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function: parseExtendedQueryString],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router: 
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack: 
                              [ Layer {
                                  handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: {},
                                  path: '/js',
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined },
                                Layer {
                                  handle: [Function: serveStatic],
                                  name: 'serveStatic',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                                  route: undefined } ] } },
                       tlsClientError: [Function],
                       listening: [ { [Function] __ultron: 0 } ],
                       error: { [Function] __ultron: 0 },
                       upgrade: { [Function] __ultron: 0 } },
                    _eventsCount: 7,
                    _maxListeners: undefined,
                    _connections: 7,
                    _handle: 
                     TCP {
                       bytesRead: 0,
                       _externalStream: {},
                       fd: -1,
                       reading: false,
                       owner: [Circular],
                       onread: null,
                       onconnection: [Function: onconnection],
                       writeQueueSize: 0 },
                    _usingSlaves: false,
                    _slaves: [],
                    _unref: false,
                    allowHalfOpen: false,
                    pauseOnConnect: false,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '6::::5000' } },
              onread: [Function: onread],
              onconnection: null,
              writeQueueSize: 0 },
           _parentWrap: 
            Socket {
              connecting: false,
              _hadError: false,
              _handle: 
               TCP {
                 bytesRead: 1150,
                 _externalStream: {},
                 fd: -1,
                 reading: [Getter/Setter],
                 owner: [Circular],
                 onread: [Function: onread],
                 onconnection: null,
                 writeQueueSize: 0 },
              _parent: null,
              _host: null,
              _readableState: 
               ReadableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 buffer: BufferList { head: null, tail: null, length: 0 },
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: null,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 resumeScheduled: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events: 
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 connect: { [Function: g] listener: [Function] },
                 error: [Function] },
              _eventsCount: 5,
              _maxListeners: undefined,
              _writableState: 
               WritableState {
                 objectMode: false,
                 highWaterMark: 16384,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 corked: 0,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 bufferedRequest: null,
                 lastBufferedRequest: null,
                 pendingcb: 0,
                 prefinished: false,
                 errorEmitted: false,
                 bufferedRequestCount: 0,
                 corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
              writable: true,
              allowHalfOpen: false,
              destroyed: false,
              _bytesDispatched: 0,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' },
              _server: 
               Server {
                 _contexts: [],
                 requestCert: false,
                 rejectUnauthorized: false,
                 key: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 52 53 41 20 50 52 49 56 41 54 45 20 4b 45 59 2d 2d 2d 2d 2d 0d 0a 50 72 6f 63 2d 54 79 70 65 3a 20 34 2c 45 4e 43 52 ... >,
                 passphrase: '123456',
                 cert: <Buffer 2d 2d 2d 2d 2d 42 45 47 49 4e 20 43 45 52 54 49 46 49 43 41 54 45 2d 2d 2d 2d 2d 0d 0a 4d 49 49 43 57 44 43 43 41 63 47 67 41 77 49 42 41 67 49 4a 41 ... >,
                 honorCipherOrder: true,
                 NPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31 08 68 74 74 70 2f 31 2e 30>,
                 ALPNProtocols: <Buffer 08 68 74 74 70 2f 31 2e 31>,
                 sessionIdContext: 'e87ec33496db7c00f32bbcbb2c6af3ee',
                 _sharedCreds: 
                  SecureContext {
                    context: SecureContext {},
                    alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
                 domain: null,
                 _events: 
                  { connection: [Function],
                    secureConnection: [Function: connectionListener],
                    request: 
                     { [Function: app]
                       domain: undefined,
                       _events: { mount: [Function: onmount] },
                       _maxListeners: undefined,
                       setMaxListeners: [Function: setMaxListeners],
                       getMaxListeners: [Function: getMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       prependListener: [Function: prependListener],
                       once: [Function: once],
                       prependOnceListener: [Function: prependOnceListener],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       listenerCount: [Function: listenerCount],
                       eventNames: [Function: eventNames],
                       init: [Function: init],
                       defaultConfiguration: [Function: defaultConfiguration],
                       lazyrouter: [Function: lazyrouter],
                       handle: [Function: handle],
                       use: [Function: use],
                       route: [Function: route],
                       engine: [Function: engine],
                       param: [Function: param],
                       set: [Function: set],
                       path: [Function: path],
                       enabled: [Function: enabled],
                       disabled: [Function: disabled],
                       enable: [Function: enable],
                       disable: [Function: disable],
                       acl: [Function],
                       bind: [Function],
                       checkout: [Function],
                       connect: [Function],
                       copy: [Function],
                       delete: [Function],
                       get: [Function],
                       head: [Function],
                       link: [Function],
                       lock: [Function],
                       'm-search': [Function],
                       merge: [Function],
                       mkactivity: [Function],
                       mkcalendar: [Function],
                       mkcol: [Function],
                       move: [Function],
                       notify: [Function],
                       options: [Function],
                       patch: [Function],
                       post: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       purge: [Function],
                       put: [Function],
                       rebind: [Function],
                       report: [Function],
                       search: [Function],
                       subscribe: [Function],
                       trace: [Function],
                       unbind: [Function],
                       unlink: [Function],
                       unlock: [Function],
                       unsubscribe: [Function],
                       all: [Function: all],
                       del: [Function],
                       render: [Function: render],
                       listen: [Function: listen],
                       request: IncomingMessage { app: [Circular] },
                       response: ServerResponse { app: [Circular] },
                       cache: {},
                       engines: {},
                       settings: 
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function: parseExtendedQueryString],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                          'jsonp callback name': 'callback' },
                       _eventsCount: 1,
                       locals: 
                        { settings: 
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function: parseExtendedQueryString],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: 'C:\\Users\\Helton\\Documents\\jobs\\frontend-sistema-sipe\\chat-cco\\views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router: 
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack: 
                           [ Layer {
                               handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function],
                               name: '<anonymous>',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/fonts\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: {},
                               path: '/js',
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/css\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined },
                             Layer {
                               handle: [Function: serveStatic],
                               name: 'serveStatic',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: { /^\/js\/?(?=\/|$)/i fast_star: false, fast_slash: false },
                               route: undefined } ] } },
                    tlsClientError: [Function],
                    listening: [ { [Function] __ultron: 0 } ],
                    error: { [Function] __ultron: 0 },
                    upgrade: { [Function] __ultron: 0 } },
                 _eventsCount: 7,
                 _maxListeners: undefined,
                 _connections: 7,
                 _handle: 
                  TCP {
                    bytesRead: 0,
                    _externalStream: {},
                    fd: -1,
                    reading: false,
                    owner: [Circular],
                    onread: null,
                    onconnection: [Function: onconnection],
                    writeQueueSize: 0 },
                 _usingSlaves: false,
                 _slaves: [],
                 _unref: false,
                 allowHalfOpen: false,
                 pauseOnConnect: false,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '6::::5000' } },
           _secureContext: 
            SecureContext {
              context: SecureContext {},
              alpnBuffer: <Buffer 08 68 74 74 70 2f 31 2e 31> },
           reading: true,
           owner: [Circular],
           onread: [Function: onread],
           writeQueueSize: 1,
           onhandshakestart: [Function],
           onhandshakedone: [Function],
           onclienthello: [Function],
           oncertcb: [Function],
           onnewsession: [Function],
           lastHandshakeTime: 11182,
           handshakes: 0,
           onerror: [Function] },
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: -1,
        _idleNext: null,
        _idlePrev: null,
        _idleStart: 11185,
        parser: null,
        on: [Function],
        _paused: false,
        read: [Function],
        _consuming: true } },
  protocolVersion: 13,
  _maxPayload: 104857600,
  _isServer: true,
  idUser: '21' }